@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
/* 	--perspective: 100px; */
	--grid-size: 5%;
	--line-width: 1px;
  --color: hsl(0 0% 94%);
  --accent: hsl(0 0% 2%);
  --background: hsl(0 0% 4%);
  --line: hsl(0 0% 100% / 0.15);
  --text: hsl(0 0% 90%);
  --gradient: conic-gradient(from 180deg at 50% 70%,hsla(0,0%,98%,1) 0deg,#eec32d 72.0000010728836deg,#ec4b4b 144.0000021457672deg,#709ab9 216.00000858306885deg,#4dffbf 288.0000042915344deg,hsla(0,0%,98%,1) 1turn);
  --border-radius: 12px;
  --border-width: 3px;
  --border: hsl(280 10% 50% / 1);

}

*, *::before, *::after {
  box-sizing: border-box;
}

html,
body {
  min-width: 320px;
  font-size: 16px;
  font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto,
    "Helvetica Neue", Arial, sans-serif;
  box-sizing: border-box;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  text-size-adjust: 100%;
  background: var(--background);
  color: var(--text);
}

strong {
	font-weight: 90;
	color: var(--text);
}

.wrapper {
	position: relative;
	transform-style: preserve-3d;
}

.scene {
	transform: translate3d(-50%, -50%, 1000px);
	position: fixed;
	top: 50%;
	left: 50%;
  width: 100%;
}


[data-perspective] .wrapper {
	scale: 0.5;
	transform: rotateX(calc(var(--rx, 0) * 1deg)) rotateY(calc(var(--ry, 0) * -1deg)) rotateX(90deg) translate3d(0, 0, 25cqmax);
}

[data-perspective] .warp {
	overflow: visible;
	clip-path: unset;
	perspective: unset;
}

.wrapper::after {
	--diff: calc(var(--line-width) * 0.5);
	content: "";
	width: 24px;
	aspect-ratio: 1;
	background: var(--line);
	position: absolute;
	top: 0;
	left: 0;
	translate: -50% -50%;
	background:
		linear-gradient(90deg, transparent calc(50% - var(--diff)), var(--accent) calc(50% - var(--diff)) calc(50% + var(--diff)), transparent calc(50% + var(--diff))),
		linear-gradient(transparent calc(50% - var(--diff)), var(--accent) calc(50% - var(--diff)) calc(50% + var(--diff)), transparent calc(50% + var(--diff)));
}
  
.warp {
  container-type: size;
  width: 100%;
	aspect-ratio: 4 / 3;
  perspective: calc(var(--perspective) * 1px);
  transform-style: preserve-3d;
  clip-path: inset(0 0 0 0);
  resize: both;
  overflow: hidden;
  min-height: 350px;
  min-width: 350px;
}

.warp * {
	pointer-events: none;
}

.warp__side {
  width: 100%;
  height: 100%;
  transform-style: preserve-3d;
  position: absolute;
  container-type: inline-size;
  background:
  	linear-gradient(var(--line) 0 1px, transparent 1px var(--grid-size)) 50% -0.5px / var(--grid-size) var(--grid-size),
    linear-gradient(90deg, var(--line) 0 1px, transparent 1px var(--grid-size)) 50% 50% / var(--grid-size) var(--grid-size);
}

.warp__side--top {
	width: 100cqi;
	height: 100cqmax;
  transform-origin: 50% 0%;
  transform: rotateX(-90deg);
}

.warp__side--bottom {
	width: 100cqi;
	height: 100cqmax;
	top: 100%;
  transform-origin: 50% 0%;
  transform: rotateX(-90deg);
}

.warp__side--left {
	width: 100cqh;
	height: 100cqmax;
	top: 0;
	left: 0;
  transform-origin: 0% 0%;
  transform: rotate(90deg) rotateX(-90deg);
}

.warp__side--right {
	width: 100cqh;
	height: 100cqmax;
	top: 0;
	right: 0;
  transform-origin: 100% 0%;
  transform: rotate(-90deg) rotateX(-90deg);
}

.beam {
	width: var(--grid-size);
	position: absolute;
	top: 0;
	left: calc(var(--x, 0) * var(--grid-size));
	aspect-ratio: 1 / var(--ar, 1);
	background: linear-gradient(hsl(var(--hue) 80% 60%), transparent);
	translate: 0 calc((var(--speed) / var(--delay)) * 1cqh);
  animation-name: warp;
  animation-duration: calc((var(--speed, 0) * var(--reduced, 0)) * 1s);
  animation-delay: calc((var(--delay, 0) * var(--reduced, 1)) * -1s);
  animation-iteration-count: infinite;
  animation-timing-function: linear;
}

/* @media(prefers-reduced-motion: no-preference) {
  .beam {
    animation-duration: calc(var(--speed, 0) * 1s);
    animation-delay: calc(var(--delay), 0) * -1s);
  }
} */

@keyframes warp {
	0% { translate: -50% 100cqmax; }
	100% { translate: -50% -100%; }
}

article {
	text-align: center;
	z-index: 5;
	display: grid;
	gap: 1rem;
  position: absolute;
  top: 50%;
  left: 50%;
  translate: -50% -50%;
  background: var(--bg);
  border: 1px solid hsl(0 0% 50% / 1);
  border-radius: 6px;
  padding: 2rem;
/*  font-size: clamp(1.35rem, 1vw + 1rem, 3rem);*/
/*   min-width: 320px; */
  width: 320px;
  box-shadow:
    0 1px hsl(0 0% 2% / 0.25) inset,
    0 -1px hsl(0 0% 2% / 0.5) inset,
    0 5px 10px hsl(0 0% 0% / 0.5);
}

.dg.ac {
	z-index: 9999;
	transform: translate3d(0, 0, 50000px);
	-webkit-transform: translate3d(0, 0, 50000px);
	-moz-transform: translate3d(0, 0, 50000px);
	-ms-transform: translate3d(0, 0, 50000px);
	-o-transform: translate3d(0, 0, 50000px);
}


// Proximity Card
@property --start {
	syntax: '<number>';
	inherits: true;
	initial-value: 0;
}

.card {
	--active: 0.15;
	--start: 0;
	height: 100%;
	background: var(--background);
  overflow: hidden;
	padding: 0.1rem;
	border-radius: var(--border-radius);
	width: 100%;
	display: flex;
	flex-direction: column;
	gap: 0.25rem;
	position: relative;
}

.card:is(:hover, :focus-visible) {
  z-index: 2;
}

.glows {
	pointer-events: none;
	position: absolute;
	inset: 0;
	filter: blur(calc(var(--blur) * 1px));
}

.glows::after,
.glows::before {
  --alpha: 0;
  content: "";
  background: var(--gradient);
  background-attachment: fixed;
  position: absolute;
	inset: -5px;
  border: 10px solid transparent;
  border-radius: var(--border-radius);
  mask:
  	linear-gradient(#0000, #0000),
  	conic-gradient(from calc((var(--start) - (var(--spread) * 0.5)) * 1deg), #000 0deg, #fff, #0000 calc(var(--spread) * 1deg));
  mask-composite: intersect;
  mask-clip: padding-box, border-box;
  opacity: var(--active);
  transition: opacity 1s;
}

.card::before {
	position: absolute;
	inset: 0;
	border: var(--border-width) solid transparent;
	content: "";
	border-radius: var(--border-radius);
	pointer-events: none;
	background: var(--border);
  background-attachment: fixed;
  border-radius: var(--border-radius);
  mask:
  	linear-gradient(#0000, #0000),
  	conic-gradient(
  		from calc(((var(--start) + (var(--spread) * 0.25)) - (var(--spread) * 1.5)) * 1deg),
  		hsl(0 0% 100% / 0.15) 0deg,
  		white,
  		hsl(0 0% 100% / 0.15) calc(var(--spread) * 2.5deg));
  mask-clip: padding-box, border-box;
  mask-composite: intersect;
  opacity: var(--active);
  transition: opacity 1s;
}

.card::after {
	--bg-size: 100%;
  content: "";
  pointer-events: none;
  position: absolute;
  background: var(--gradient);
  background-attachment: fixed;
  border-radius: var(--border-radius);
  opacity: var(--active, 0);
  transition: opacity 1s;
  --alpha: 0;
  inset: 0;
  border: var(--border-width) solid transparent;
  mask:
  	linear-gradient(#0000, #0000),
  	conic-gradient(from calc(((var(--start) + (var(--spread) * 0.25)) - (var(--spread) * 0.5)) * 1deg), #0000 0deg, #fff, #0000 calc(var(--spread) * 0.5deg));
  filter: brightness(1.5);
  mask-clip: padding-box, border-box;
  mask-composite: intersect;
}

.badge {
	border: 2px solid var(--border);
	align-self: start;
	border-radius: 100px;
	padding: 0.5rem 0.7rem;
	font-size: 0.675rem;
	display: flex;
	align-items: center;
	gap: 0.25rem;
	font-weight: 50;
}

.card h2 {
	margin: 0;
	padding: 1rem 0;
	font-weight: 100;
	font-size: 1.5rem;
}

.header {
	position: relative;
	flex: 1;
	display: flex;
	align-items: center;
}

.header svg {
	--count: 4;
	width: 106px;
}

.header svg:nth-of-type(2),
.header svg:nth-of-type(3),
.header svg:nth-of-type(4) {
	position: absolute;
	z-index: calc(var(--count) - var(--index));
	translate: calc(var(--index) * 30%) 0;
	opacity: calc(var(--count) / (2 * (var(--index) * 10)));
}

.header svg:nth-of-type(2) {
	--index: 1;
}
.header svg:nth-of-type(3) {
	--index: 2;
}
.header svg:nth-of-type(4) {
	--index: 3;
}

.badge svg {
	width: 16px;
}

.dg.ac {
  z-index: 99999 !important;
}

@property --shimmer-angle {
  syntax: "<angle>";
  initial-value: 0deg;
  inherits: false;
}

@keyframes shimmer {
  0% {
    --shimmer-angle: 0deg;
  }

  100% {
    --shimmer-angle: 360deg;
  }
}

.skill-effect {
  animation: gradient-active 6s ease infinite;
  background-size: 400% 400%;
}

@keyframes gradient-active {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

article {
  position: relative!important;
  top: 0!important;
  left: 0!important;
  translate: 0 0!important;
}